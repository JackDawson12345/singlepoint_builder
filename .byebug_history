c
if current_user.is_ecommerce == true
current_user.is_ecommerce
c
user_setup.package_type == 'e-commerce'
user_setup.package_type
user_setup
User
user
current_user
c
current_user.is_ecommerce
current_user
c
Website.where(theme_id: theme.id).count
Website.where(theme_id: theme.id)
Website.all
theme
c
params
c
foundComponent.editable_fields.blank?
c
foundComponent.editable_fields.blank?
foundComponent.editable_fields.nil?
foundComponent.editable_fields
c
foundComponent.editable_fields
editable_fields
c
foundComponent.editable_fields
foundComponent.name
foundComponent.count
foundComponent
c
params[:page_slug]
params
c
params[:page_slug]
params
current_user.website.domain_name
current_user.website
current_user
c
variants_params
variants_params.is_a?(Hash)
variants_params.is_a?(Array)
variants_params.is_a?(Array
variants_params.is_a?(Hash)
variants_params
c
variants_params.is_a?(Array)
variants_params.is_a?(Hash)
variants_params
variants_params.is_a?(Array)
variants_params.is_a?(Hash)
variants_params
variants_params.is_a?
variants_params.is_a?(Hash)
variants_params
c
variants_params.blank?
variants_paramsvariants_params.blank?
variants_params
variants_params.inspect
variants_paramsvariants_params.inspect
variants_params
c
product['data']['category']
product['data']
product['price']['price']
product['price']
product
product['data']['name']
product['data']
product
c
productc
product
c
Time.current.iso8601
product_params
c
params.require(:product).permit(:name, :description, :price, :category)
product_params
params[:name]
params
product_params
product_params[:name]
SecureRandom.uuid
current_user.website&.products
current_products = current_user.website&.products || []
exit
updated_content.gsub('{{title}}', field[1].to_s)
'{{'+field[0].to_s+'}}'
updated_content.gsub('{{'+field[0].to_s+'}}', field[1].to_s)
updated_content
field[1].to_s
'{{'+field[0].to_s+'}}'
field
c
x
updated_content
c
updated_content
c
updated_contenc
c
updated_content
c
field[0]
field
c
field
component.editable_fields.to_a
component.editable_fields.to_a.count
component.editable_fields.to_a
component.editable_fields
c
component.editable_fields
component
c
componentHTML = component.content['html']
component.content['html']componentHTML = component.content['html']
component.content['html']
component.content
component.id
component.count
component
c
foundComponent.content['html']
foundComponent.content[html]
c
@page_data['components']
@page_data
c
@theme
c
@themePage
c
@themePage
c
@theme.pages
@theme
@themePage
c
@allComonents.count
@allComonents
c
@themePage['components']
@themePage[1]['components']
@themePage
c
@theme.pages
@theme.pages.find { |name, data| data["theme_page_id"].to_s == params[:theme_page_id] }
@theme.pages[1].find { |name, data| data["theme_page_id"].to_s == params[:theme_page_id] }
@theme.pages
@themePage
c
new_pages_data.count
new_pages_data
c
index
page_params
c
params.require(:new_pages)
params
c
@themePages
c
themePage[1]['theme_page_id']
themePage
c
@theme.pages.first[1]
@theme.pages[1]
@theme.pages
c
@themePages.first[1]
@themePages.first
@themePages[0]
@themePages[1]
@themePages
themePage[1]
themePage
c
params
c
params
c
support_option
c
support_option
c
params[:support_option]
params
c
params[:package_type]
params
c
x
@user
c
response_data
c
domain
formatted = {
      name: domain["domain"] || domain["name"] || domain.to_s,
      available: domain["available"] || domain["status"] == "available" || true,
      price: domain["price"] || domain["cost"] || nil
    }
domain
c
http = Net::HTTP.new(uri.host, uri.port)
uri = URI("https://api.20i.com/domain-search/#{URI.encode_www_form_component(query)}")
bearer = Base64.strict_encode64(general_key.strip)
raise "Missing 20i general key" if general_key.to_s.strip.empty?
general_key = Rails.application.credentials.dig(:twenty_i, :general_key) ||
                  ENV["TWENTYI_GENERAL_KEY"]
query
c
JSON.parse(res.body)[1]['can']
JSON.parse(res.body)[1]
JSON.parse(res.body)0
JSON.parse(res.body)['name']
JSON.parse(res.body)[:name]
JSON.parse(res.body)[1]
JSON.parse(res.body)[0]
JSON.parse(res.body)
JSON.pretty_generate(JSON.parse(res.body))[:name]
JSON.pretty_generate(JSON.parse(res.body))
res.body
res
c
res.body
res
puts res.body
res = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) { |http| http.request(req) }
req["Accept"] = "application/json"
req["Authorization"] = "Basic #{Base64.strict_encode64("#{api_key}:")}"
req = Net::HTTP::Get.new(uri)
uri = URI("https://api.20i.com/domain/check?domain=#{domain}")
api_key
domain
c
current_user.user_setup.steps_percentage
current_user.user_setup.steps_completed
c
current_user.user_setup.steps_completed
c
@user.user_setup.published == true
@user.user_setup.published == false
@user.user_setup.published
c
@user.user_setup
@user.user_setup.domain_name
@user.user_setup@user.user_setup.domain_name
