c
params[:title]
params
c
component.template_patterns
nav_items_html
c
nav_items_html
c
pageSlug = page_data['slug'].to_s
pageName = page_name.to_s
page_data['slug']
page_data[slug]
page_data
page_name
c
current_user.website.pages
theme_page[1].map
theme_page[1]
current_user.website.pages[1]
current_user.website.pages
theme_page
c
patterns_hash = component.template_patterns
patterns_hash = JSON.parse(component.template_patterns)
patterns_hash = JSON.parse(template_patterns)
component
c
component
c
current_user
c
updated_content.include?('{{nav_items}}') && unless component.template_patterns == ""
component
component.template_patterns == ""
c
updated_content
c
component.template_patterns
component
c
Time.now
Date
Date.now
date.now
params[:id]
params[:user][:id]
params[:user][:domain_name]
params[:domain_name]
params
c
@user
c
if user_setup.nil?c
user_setup
user_setup.payment_status
c
user_setup.payment_status
user_setup
c
@notification.update(read: true)
@notification
c
Notification.where(user_id: current_user.id).last(5)
Notification.where(user_id: current_user.id)
Notification.all
c
if current_user.is_ecommerce == true
current_user.is_ecommerce
c
user_setup.package_type == 'e-commerce'
user_setup.package_type
user_setup
User
user
current_user
c
current_user.is_ecommerce
current_user
c
Website.where(theme_id: theme.id).count
Website.where(theme_id: theme.id)
Website.all
theme
c
params
c
foundComponent.editable_fields.blank?
c
foundComponent.editable_fields.blank?
foundComponent.editable_fields.nil?
foundComponent.editable_fields
c
foundComponent.editable_fields
editable_fields
c
foundComponent.editable_fields
foundComponent.name
foundComponent.count
foundComponent
c
params[:page_slug]
params
c
params[:page_slug]
params
current_user.website.domain_name
current_user.website
current_user
c
variants_params
variants_params.is_a?(Hash)
variants_params.is_a?(Array)
variants_params.is_a?(Array
variants_params.is_a?(Hash)
variants_params
c
variants_params.is_a?(Array)
variants_params.is_a?(Hash)
variants_params
variants_params.is_a?(Array)
variants_params.is_a?(Hash)
variants_params
variants_params.is_a?
variants_params.is_a?(Hash)
variants_params
c
variants_params.blank?
variants_paramsvariants_params.blank?
variants_params
variants_params.inspect
variants_paramsvariants_params.inspect
variants_params
c
product['data']['category']
product['data']
product['price']['price']
product['price']
product
product['data']['name']
product['data']
product
c
productc
product
c
Time.current.iso8601
product_params
c
params.require(:product).permit(:name, :description, :price, :category)
product_params
params[:name]
params
product_params
product_params[:name]
SecureRandom.uuid
current_user.website&.products
current_products = current_user.website&.products || []
exit
updated_content.gsub('{{title}}', field[1].to_s)
'{{'+field[0].to_s+'}}'
updated_content.gsub('{{'+field[0].to_s+'}}', field[1].to_s)
updated_content
field[1].to_s
'{{'+field[0].to_s+'}}'
field
c
x
updated_content
c
updated_content
c
updated_contenc
c
updated_content
c
field[0]
field
c
field
component.editable_fields.to_a
component.editable_fields.to_a.count
component.editable_fields.to_a
component.editable_fields
c
component.editable_fields
component
c
componentHTML = component.content['html']
component.content['html']componentHTML = component.content['html']
component.content['html']
component.content
component.id
component.count
component
c
foundComponent.content['html']
foundComponent.content[html]
c
@page_data['components']
@page_data
c
@theme
c
@themePage
c
@themePage
c
@theme.pages
@theme
@themePage
c
@allComonents.count
@allComonents
c
@themePage['components']
@themePage[1]['components']
@themePage
c
@theme.pages
@theme.pages.find { |name, data| data["theme_page_id"].to_s == params[:theme_page_id] }
@theme.pages[1].find { |name, data| data["theme_page_id"].to_s == params[:theme_page_id] }
@theme.pages
@themePage
c
new_pages_data.count
new_pages_data
c
index
page_params
c
params.require(:new_pages)
params
c
@themePages
c
themePage[1]['theme_page_id']
themePage
c
@theme.pages.first[1]
@theme.pages[1]
@theme.pages
c
@themePages.first[1]
@themePages.first
@themePages[0]
@themePages[1]
@themePages
themePage[1]
themePage
c
params
c
params
c
support_option
