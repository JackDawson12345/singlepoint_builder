c
cc
c
link['icon']
link
name
social_template
c
component
c
current_user['business_info']['social_media'].nil?
current_user['business_info']['social_media']
c
component.template_patterns
component.template_patterns["nav_items"]
component
c
nav_items_html
c
nav_items_html
c
component.template_patterns
raw_template.match(/"nav_items":\s*"(.+)"\s*}/)
raw_template = component.template_patterns.to_json
component.template_patterns.to_json
component.template_patterns
raw_template.match(/"nav_items":\s*"(.+)"\s*}/)
component.template_patterns
c
component.template_patterns
raw_template
c
theme.settings['Colour Scheme']['primary_colour']
theme.settings['Colour Scheme']
theme.settings
theme
user.website.theme.global_css
theme = user.website.theme
theme = user.theme
user = User.find(user_id)
theme = user.theme
user = User.find(user_id)
user_id
c
component.editable_fields['global_address']
component.editable_fields
component
current_user['business_info']['location']['location_name']
c
current_user['business_info']['email']
current_user['business_info']
current_user
c
name.include? "global"
name.includes? "global"
name.includes "global"
name
c
current_user.logo
c
current_user.logo
current_user
user_id
c
cc
c
updated_content
c
updated_content
c
updated_content
c
x
payment_intent
c
recent_login
c
login_activity.login_at
login_activity
index
current_user.login_activities.order(login_at: :desc).each_with_index do |login_activity, index|
c
index
c
index
c
login_activity.devicec
login_activity.device
login_activity
c
[city, region, country].join(', ')
[city, region, country].join(',')
[city, region, country]
country = result.country
region = result.region
city = result.city
 result = Geocoder.search(ip_address).first
result = Geocoder.search(ip_address).first
ip_address
c
login_activities.count
login_activities
email
c
latest_login.user.get_address_from_ip
latest_login.user
latest_login
c
theme
theme.settings
themetheme.settings
theme
c
preference
c
preference
c
preference
c
preference
c
current_user.website.theme.global_css
current_user.website.theme.css
current_user.website.theme
@page_data
c
@theme
params[:css]
params
c
current_user.profile_image
current_user.profile_image.attached?
current_user.profile_image
c
account_settings_params
params[:remove_profile_image] == "1"
@user = current_user
c
current_user.website
current_user.website.products
c
current_user.website
current_user
c
parse_images(row[:images])
parse_categories(row[:categories])
Time.current.iso8601
generate_url_handle(row[:name])
parse_boolean(row[:track_quantity])
row[:track_quantity]
c
row
parse_boolean(row[:sell_out_of_stock])
parse_boolean(row[:track_quantity])parse_boolean(row[:sell_out_of_stock])
row[:track_quantity]
parse_boolean
parse_boolean(row[:track_quantity])
c
row[:cost_per_item]&.to_f
row[:sale_price]&.to_f || 0.0
row[:sale_price]&.to_f
row[:price]&.to_f || 0.0
row[:images]
parse_images(row[:images])
parse_categories(row[:categories])
row[:description]
row[:name]
row
c
row
c
csv_file.content_type == 'text/csv' || csv_file.original_filename.ends_with?('.csv')
csv_file
c
page_type == 'service_category'
page_type
c
@blog_categories =current_user.website.categories['blogs']
current_user.website.categories
current_user.website
c
seo_fields.all?(&:blank?)
 seo_fields = [focus_keyword, title_tag, meta_description]
focus_keyword = category['seo']['focus_keyword']
    title_tag = category['seo']['title_tag']
    meta_description = category['seo']['meta_description']
focus_keyword = category['seo']['focus_keyword']
category['seo']['title_tag'].blank?
category['seo']['title_tag']
category['seo']
category
c
seo_state(category)
cseo_state
c
seo_state
category.seo_state
category
c
@category
@category['seo'] = {"focus_keyword" => '',
                        "title_tag" => '',
                        "meta_description" => ''}
category_params.to_h
category_params
@category
c
outer_page_data
outer_page_name
c
@service_pages
c
outer_page_data['slug']
outer_page_data
outer_page_name, outer_page_data = find_outer_page_data(page, current_user.website.pages)
c
outer_page_name, outer_page_data = find_outer_page_data(page, current_user.website.pages)
outer_page_name = find_outer_page_name(page, current_user.website.pages)
c
current_user.website.pages
current_user.pages
page
current_user.website.pages["theme_pages"]["services"]
c
page
name
c
@service_pages.blank?
@service_pages
@service_pages.empty?
c
@service_pages['inner_pages']
@service_pages['inner_pages'].empty?
@service_pages['inner_pages']
@service_pages
c
current_user.website.pages
params
c
page['slug']
page
name
cname
c
page[0]
page
c
x
pages['theme_pages'].count
pages['theme_pages']
pages
pages.to_a.count
pages.to_a
pages.count
pages
c
