c
page_data
c
page_data
c
page_data
c
page_data
c
page_date
c
page_date
c
page_data
c
@page_data
c
params['theme_page_id']
params
para,s
c
@page_data
c
@page_data
c@page_data
c
params
c
params
load_page_data(params[:page_slug])
c
params
@page_data
c
page_components << new_component
new_component
c
page_components = theme_page_data[1]['components']
page_components
page_components = theme_page_data[1]['components'].last['position']
page_components = theme_page_data[1]['components'].last
page_components = theme_page_data[1]['components']
theme_page_data[1]['components']page_components = theme_page_data[1]['components']
theme_page_data[1]['components']
theme_page_data[1]
theme_page_data
theme_page_datatheme_page_data
c
theme_page_id = params[:theme_page_id]
user.website.pages
c
params
c
params[:theme_page_id]
params
c
found_component.editable_fields
found_component
</div>found_component
  <h2 class="nata-sans text-base font-semibold">Footer</h2>
  <% end %>
    <p><%= found_component %></p>
    <% found_component = Component.find(component['component_id']) %>
  <% components.each do |component| %>
  <h2 class="nata-sans text-base font-semibold">Page</h2>
  <h2 class="nata-sans text-base font-semibold">Header</h2>
<div class="p-4">
c
matching_page[1]['components'].count
matching_page[1]['components']
matching_page[1]
matching_page[1].components
matching_page[1]
websitePageID
page_data
matching_page
c
website_pages = current_user.website.pages
websitePageID = params[:theme_page_id]
website_pages = current_user.website.pages
params[:theme_page_id]
theme_page_id
params
c
@page_data['theme_page_id']
@page_data
c
params
current_user.website.pages
current_user.website
current_user
c
sections
c
current_customisations
theme_page_ids
c
user
c
user_id
c
params
paramsc
c
paramsc
params
c
field_values
c
params
c
params[:theme_page_id]
params
c
params
c
name
type
editable_fields = component.editable_fields
editable_fieldseditable_fields = component.editable_fields
editable_fields
component
type
c
type
name
c
component.editable_fields.each
component.editable_fields
c
component
params
component
c
component.field_types
component.editable_fields
component.editable_fields.count
component.editable_fields
 component = Component.find(component_id)
Component.find(component_id) component = Component.find(component_id)
Component.find(component_id)
c
params
c
user_id
theme_page_id
component_type
component_id
c
params[:website_editor][:component_id]
params[:component_id]params[:website_editor][:component_id]
params[:component_id]
params
c
@page_data['theme_page_id']
@page_data
c
page_data['slug']
page_data.slug
page_data
c
options.map do |page_name, page_data|
options
c
options["theme_pages"]
options["theme_pages"].count
options["theme_pages"]
options
c
title
c
options
menu
c
menu.c
menu
c
test_render = render_to_string(partial: path, locals: { menu: menu, options: options })
c
test_render = render_to_string(partial: path, locals: { menu: menu, options: options })
possible_paths
c
path
c
params[:title]
params
c
component.template_patterns
nav_items_html
c
nav_items_html
c
pageSlug = page_data['slug'].to_s
pageName = page_name.to_s
page_data['slug']
page_data[slug]
page_data
page_name
c
current_user.website.pages
theme_page[1].map
theme_page[1]
current_user.website.pages[1]
current_user.website.pages
theme_page
c
patterns_hash = component.template_patterns
patterns_hash = JSON.parse(component.template_patterns)
patterns_hash = JSON.parse(template_patterns)
component
c
component
c
current_user
c
updated_content.include?('{{nav_items}}') && unless component.template_patterns == ""
component
component.template_patterns == ""
c
updated_content
c
component.template_patterns
component
c
Time.now
Date
Date.now
date.now
params[:id]
params[:user][:id]
params[:user][:domain_name]
params[:domain_name]
params
c
@user
c
if user_setup.nil?c
user_setup
user_setup.payment_status
c
user_setup.payment_status
user_setup
c
@notification.update(read: true)
@notification
c
Notification.where(user_id: current_user.id).last(5)
Notification.where(user_id: current_user.id)
Notification.all
c
if current_user.is_ecommerce == true
current_user.is_ecommerce
c
user_setup.package_type == 'e-commerce'
user_setup.package_type
user_setup
