c
params[:background_colour]
params
c
cc
c
website_settings['Colour Scheme'].to_a
updated_css_content
c
updated_css_content = updated_css_content.gsub!('{{' + name.to_s + '}}', value.to_s)
updated_css_content.gsub!('{{' + name.to_s + '}}', value.to_s)
'{{' + name.to_s + '}}'
{{' + name.to_s + '}}
updated_css_content
cupdated_css_content
c
updated_css_content = updated_css_content.gsub!('{{' + name.to_s + '}}', value.to_s)
updated_css_content = updated_css_content.gsub!('{{' + name + '}}', value)
'{{' + name + '}}'
 componentCSS.include? '{{' + name + '}}'
componentCSS
c
name
c
params
c
website_settings
c
params[:secondary_colour]
params[:primary_colour]
params
c
item
c
item
c
item
c
background_colour = options.is_a?(Hash) && options["Background Colour Scheme"].is_a?(Hash) ? options["Background Colour Scheme"]["background_colour"] : nil
 background_colour = options.is_a?(Hash) && options["Background Colour Scheme"].is_a?(Hash) ? content["Background Colour Scheme"]["background_colour"] : nil
options.is_a?(Hash)
c
options.dig("Font Scheme", "button_font")
options
content
button_font
c
options
menu
c
menu
options
c
'{{' + name + '}}'
componentCSS.include? '{{' + name + '}}'
value
name
c
theme_settings['Colour Scheme'].to_a
theme_settings['Colour Scheme'].to_a.
theme_settings['Colour Scheme'].to_a.first
theme_settings['Colour Scheme'].to_a
theme_settings['Colour Scheme']
theme_settings['Colour Scheme]
theme_settings
c
component.editable_fields
component_page_id
theme_page_id
component
c
foundComponent = Component.find(component["component_id"])
<% foundComponent = Component.find(component["component_id"]) %>
component
c
@page_data["components"]
component
c
component
c
page
c
params[:theme_page_id]
params
theme.pages
theme = Theme.find(params[:id])
params[:id]
params
c
theme_page_ids = website.pages["theme_pages"].values.flat_map do |page_data|
        ids = [page_data["theme_page_id"]]
        ids += page_data["inner_pages"].values.map { |inner_page| inner_page["theme_page_id"] }
        ids
      end
website.pages
theme_page_ids
c
theme_page_ids = website.pages["theme_pages"].values.map { |page_data| page_data["theme_page_id"] }
component.global
component
current_customisations = website.customisations&.dig("customisations") || []
website = user.website
field_values.inspect
c
field_values
Rails.logger.debug "Image content type: #{params[name].content_type}"
Rails.logger.debug "Image filename: #{params[name].original_filename}"
Rails.logger.debug "Uploading new image for field: #{name}"
remove_param = params["remove_#{name}"] || params.dig(:manage_website_editor_website_editor, "remove_#{name}")
remove_param
params["remove_#{name}"] || params.dig(:manage_website_editor_website_editor, "remove_#{name}")
params
type
c
component_page_id = params[:component_page_id]
user = User.find(params[:user_id])
theme_page_id = params[:theme_page_id]
component = Component.find(params[:component_id])
params
component
c
@images.count
@images
c
object.key
object
c
response.contents.first.key
response.contents.first
response.contents.firs
response.contents
response
c
@images
c
response
c
s3_client.list_objects_v2(bucket: bucket_name)
s3_client
bucket_name
c
Rails.application.credentials.dig(:aws, :s3_bucket)
Rails.application.credentials
bucket_name
c
@images
c
params
c
name
params
c
params
c
params
c
custom_values[name] || component.editable_fields[name]
component.editable_fields[name]
name
type
c
cc
c
theme.image
theme.image.attached?
theme.image.attached
theme
c
service['content']
c
service
c
service['name']
service
service = current_user.website.services.find { |s| s["id"] == theme_page_id }
current_user.website.services
theme_page_id
component.component_type
c
updated_content
component
component_page_id
theme_page_id
component.editable_fields == ""
componentHTML.include?('_class}}')
updated_content.include?('{{nav_items}}')
updated_content.include?('{{service_items}}')
c
@page_data
@page_name
c
@page_data
theme_page_id = @page_data['theme_page_id']
@page_data
theme_page_id = @page_data['theme_page_id']
@all_page_data
data
@all_page_data['inner_pages']
@page_name
c
@page_data
@page_data['theme_page_id']
@page_name = pages['theme_pages'].find { |name, data| data['theme_page_id'] == theme_page_id }&.first
    @page_name = pages['theme_pages'].find { |name, data| data['theme_page_id'] == theme_page_id }&.first
theme_page_id = @page_data['theme_page_id']
pages = current_user.website.pages
@page_data
c
@page_data['inner_pages']c
@page_data['inner_pages']
@page_data
@page_name = pages['theme_pages'].find { |name, data| data['theme_page_id'] == theme_page_id }&.first
@page_data
theme_page_id = @page_data['theme_page_id']
pages = current_user.website.pages
@page_data
c
service_page = current_user.website.pages["theme_pages"]["services"]
service
c
service_page['components']
c
@service_page['slug']
@service_page = current_user.website.pages["theme_pages"]["services"]
@service
c
service_page['inner_pages']
service_page.present?
service_page = current_user.website.pages["theme_pages"]["services"]
current_user.website.pages["theme_pages"]["services"]
current_user.website.pages
@service
v
c
@service['slug']
@service
matching_page['inner_pages']
matching_page
c
matching_page = current_user.website.pages['theme_pages'].values.find do |page|
  page['theme_page_id'] == theme_page_id
end
current_user.website.pages
current_user.website
theme_page_id = @service['parent_page']['theme_page_id']
@pageName, @themePage = @theme.pages["theme_pages"].find do |name, page|
      page["theme_page_id"] == theme_page_id
    end
theme_page_id = @service['parent_page']['theme_page_id']
@service['parent_page']['theme_page_id']
@service['parent_page']
@service
c
inner_slug
c
service['parent_page']['slug']
